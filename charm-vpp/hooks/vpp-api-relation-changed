#!/usr/bin/env python3
#
# Copyright 2020 OpenCloud.ES & Fairbanks
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import uuid

from copy import deepcopy

from charmhelpers.contrib.openstack import context as os_context

from charmhelpers.contrib.openstack.utils import (
    pausable_restart_on_change as restart_on_change,
    series_upgrade_prepare,
    series_upgrade_complete,
    is_unit_paused_set,
    CompareOpenStackReleases,
    os_release,
)

from charmhelpers.core.hookenv import (
    Hooks,
    UnregisteredHookError,
    config,
    log,
    relation_set,
    relation_ids,
)

from charmhelpers.core.sysctl import create as create_sysctl

from charmhelpers.core.host import (
    is_container,
)

from charmhelpers.core.unitdata import kv

from vpp_utils import (
    register_configs,
    install_packages,
    install_tmpfilesd,
    use_fqdn_hint,
)

hooks = Hooks()
CONFIGS = register_configs()


@hooks.hook('install.real')
def install():
    install_packages()


@hooks.hook('vpp-relation-changed')
@hooks.hook('config-changed')
@restart_on_change(restart_map())
def config_changed():
    # if we are paused, delay doing any config changed hooks.
    # It is forced on the resume.
    if is_unit_paused_set():
        log("Unit is pause or upgrading. Skipping config_changed", "WARN")
        return

    install_packages()
    install_tmpfilesd()

    CONFIGS.write_all()



@hooks.hook('vpp-api-relation-changed')
@restart_on_change(restart_map())
def vpp_api_changed():
    packages_to_purge = []

    if packages_to_purge:
        purge_packages(packages_to_purge)

    CONFIGS.write_all()


@hooks.hook('vpp-relation-joined')
def vpp_joined(relation_id=None, request_restart=False):
    secret = None
    
    rel_data = {
        'metadata-shared-secret': secret,
    }
    host_info = os_context.HostInfoContext()()
    if use_fqdn_hint() and host_info.get('host_fqdn'):
        rel_data.update({'host': host_info['host_fqdn']})
    if request_restart:
        rel_data['restart-nonce'] = str(uuid.uuid4())
    relation_set(relation_id=relation_id, **rel_data)


@hooks.hook('vpp-control-relation-changed')
@restart_on_change(restart_map(), stopstart=True)
def restart_check():
    CONFIGS.write_all()


@hooks.hook('update-status')
def dummy_update_status():
    """Dummy function to silence missing hook log entry"""
    pass


def main():
    try:
        hooks.execute(sys.argv)
    except UnregisteredHookError as e:
        log('Unknown hook {} - skipping.'.format(e))
    assess_status(CONFIGS)


if __name__ == '__main__':
    main()
